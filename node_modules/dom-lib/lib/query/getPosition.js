'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _getOffsetParent = require('./getOffsetParent');

var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

var _getOffset = require('./getOffset');

var _getOffset2 = _interopRequireDefault(_getOffset);

var _style = require('../style');

var _scrollTop = require('./scrollTop');

var _scrollTop2 = _interopRequireDefault(_scrollTop);

var _scrollLeft = require('./scrollLeft');

var _scrollLeft2 = _interopRequireDefault(_scrollLeft);

var _nodeName = require('./nodeName');

var _nodeName2 = _interopRequireDefault(_nodeName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (node, offsetParent) {
  var parentOffset = {
    top: 0,
    left: 0
  };

  var offset = void 0;

  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
  // because it is its only offset parent
  if ((0, _style.getStyle)(node, 'position') === 'fixed') {
    offset = node.getBoundingClientRect();
  } else {

    offsetParent = offsetParent || (0, _getOffsetParent2.default)(node);
    offset = (0, _getOffset2.default)(node);

    if ((0, _nodeName2.default)(offsetParent) !== 'html') {
      var nextParentOffset = (0, _getOffset2.default)(offsetParent);
      parentOffset.top = nextParentOffset.top;
      parentOffset.left = nextParentOffset.left;
    }

    parentOffset.top += parseInt((0, _style.getStyle)(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2.default)(offsetParent) || 0;
    parentOffset.left += parseInt((0, _style.getStyle)(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2.default)(offsetParent) || 0;
  }

  // Subtract parent offsets and node margins
  return _extends({}, offset, {
    top: offset.top - parentOffset.top - (parseInt((0, _style.getStyle)(node, 'marginTop'), 10) || 0),
    left: offset.left - parentOffset.left - (parseInt((0, _style.getStyle)(node, 'marginLeft'), 10) || 0)
  });
};