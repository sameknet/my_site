'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _domLib = require('dom-lib');

var _propTypes3 = require('../propTypes');

var _Portal = require('./Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _ModalManager = require('./ModalManager');

var _ModalManager2 = _interopRequireDefault(_ModalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var modalManager = new _ModalManager2.default();
var noop = function noop() {};

var Modal = function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props, context) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props, context));

    _this.state = { exited: !props.show };
    _this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
    _this.handleDocumentKeyUp = _this.handleDocumentKeyUp.bind(_this);
    _this.handleHidden = _this.handleHidden.bind(_this);
    _this.enforceFocus = _this.enforceFocus.bind(_this);

    return _this;
  }

  _createClass(Modal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.show) {
        this.onShow();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.show) {
        this.setState({ exited: false });
      } else if (!nextProps.transition) {
        // Otherwise let handleHidden take care of marking exited.
        this.setState({ exited: true });
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      if (!this.props.show && nextProps.show) {
        this.checkForFocus();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var transition = this.props.transition;


      if (prevProps.show && !this.props.show && !transition) {
        // Otherwise handleHidden will call this.
        this.onHide();
      } else if (!prevProps.show && this.props.show) {
        this.onShow();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _props = this.props,
          show = _props.show,
          transition = _props.transition;


      if (show || transition && !this.state.exited) {
        this.onHide();
      }
    }
  }, {
    key: 'onShow',
    value: function onShow() {
      var doc = (0, _domLib.ownerDocument)(this);
      var container = (0, _domLib.getContainer)(this.props.container, doc.body);

      modalManager.add(this, container, this.props.containerClassName);
      this.onDocumentKeyupListener = (0, _domLib.on)(doc, 'keyup', this.handleDocumentKeyUp);
      this.onFocusinListener = (0, _domLib.onFocus)(this.enforceFocus);

      this.focus();

      if (this.props.onShow) {
        this.props.onShow();
      }
    }
  }, {
    key: 'onHide',
    value: function onHide() {
      modalManager.remove(this);

      if (this.onDocumentKeyupListener) {
        this.onDocumentKeyupListener.off();
      }

      if (this.onFocusinListener) {
        this.onFocusinListener.off();
      }

      this.restoreLastFocus();
    }

    // instead of a ref, which might conflict with one the parent applied.

  }, {
    key: 'getDialogElement',
    value: function getDialogElement() {
      var node = this.modal;
      return node && node.lastChild;
    }
  }, {
    key: 'handleHidden',
    value: function handleHidden() {
      this.setState({ exited: true });
      this.onHide();

      if (this.props.onExited) {
        var _props2;

        (_props2 = this.props).onExited.apply(_props2, arguments);
      }
    }
  }, {
    key: 'handleBackdropClick',
    value: function handleBackdropClick(e) {

      if (e.target !== e.currentTarget) {
        return;
      }

      if (this.props.onBackdropClick) {
        this.props.onBackdropClick(e);
      }

      if (this.props.backdrop === true) {
        this.props.onHide();
      }
    }
  }, {
    key: 'handleDocumentKeyUp',
    value: function handleDocumentKeyUp(e) {
      if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
        if (this.props.onEscapeKeyUp) {
          this.props.onEscapeKeyUp(e);
        }
        this.props.onHide();
      }
    }
  }, {
    key: 'checkForFocus',
    value: function checkForFocus() {
      if (_domLib.canUseDom) {
        this.lastFocus = (0, _domLib.activeElement)();
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      var autoFocus = this.props.autoFocus;
      var modalContent = this.getDialogElement();
      var current = (0, _domLib.activeElement)((0, _domLib.ownerDocument)(this));
      var focusInModal = current && (0, _domLib.contains)(modalContent, current);

      if (modalContent && autoFocus && !focusInModal) {
        this.lastFocus = current;

        if (!modalContent.hasAttribute('tabIndex')) {
          modalContent.setAttribute('tabIndex', -1);
          new Error(false, 'The modal content node does not accept focus.\n          For the benefit of assistive technologies,\n          the tabIndex of the node is being set to "-1".');
        }

        modalContent.focus();
      }
    }
  }, {
    key: 'restoreLastFocus',
    value: function restoreLastFocus() {
      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
      if (this.lastFocus && this.lastFocus.focus) {
        this.lastFocus.focus();
        this.lastFocus = null;
      }
    }
  }, {
    key: 'enforceFocus',
    value: function enforceFocus() {
      var enforceFocus = this.props.enforceFocus;


      if (!enforceFocus || !this.isTopModal()) {
        return;
      }

      var active = (0, _domLib.activeElement)((0, _domLib.ownerDocument)(this));
      var modal = this.getDialogElement();

      if (modal && modal !== active && !(0, _domLib.contains)(modal, active)) {
        modal.focus();
      }
    }
  }, {
    key: 'isTopModal',
    value: function isTopModal() {
      return modalManager.isTopModal(this);
    }
  }, {
    key: 'renderBackdrop',
    value: function renderBackdrop() {
      var _this2 = this;

      var _props3 = this.props,
          Transition = _props3.transition,
          backdropTransitionTimeout = _props3.backdropTransitionTimeout,
          backdropStyle = _props3.backdropStyle,
          backdropClassName = _props3.backdropClassName;


      var backdrop = _react2.default.createElement('div', {
        ref: function ref(_ref) {
          _this2.backdrop = _ref;
        },
        style: backdropStyle,
        className: backdropClassName,
        onClick: this.handleBackdropClick,
        role: 'button',
        tabIndex: -1
      });

      if (Transition) {
        backdrop = _react2.default.createElement(
          Transition,
          {
            transitionAppear: true,
            'in': this.props.show,
            timeout: backdropTransitionTimeout
          },
          backdrop
        );
      }

      return backdrop;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props4 = this.props,
          children = _props4.children,
          Transition = _props4.transition,
          backdrop = _props4.backdrop,
          dialogTransitionTimeout = _props4.dialogTransitionTimeout,
          props = _objectWithoutProperties(_props4, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout']);

      var onExit = props.onExit,
          onExiting = props.onExiting,
          onEnter = props.onEnter,
          onEntering = props.onEntering,
          onEntered = props.onEntered;


      var show = !!props.show;
      var dialog = _react2.default.Children.only(this.props.children);

      var mountModal = show || Transition && !this.state.exited;

      if (!mountModal) {
        return null;
      }

      var _dialog$props = dialog.props,
          role = _dialog$props.role,
          tabIndex = _dialog$props.tabIndex;


      if (role === undefined || tabIndex === undefined) {
        dialog = (0, _react.cloneElement)(dialog, {
          role: role === undefined ? 'document' : role,
          tabIndex: tabIndex === null ? '-1' : tabIndex
        });
      }

      if (Transition) {
        dialog = _react2.default.createElement(
          Transition,
          {
            transitionAppear: true,
            unmountOnExit: true,
            'in': show,
            timeout: dialogTransitionTimeout,
            onExit: onExit,
            onExiting: onExiting,
            onExited: this.handleHidden,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered
          },
          dialog
        );
      }

      return _react2.default.createElement(
        _Portal2.default,
        {
          ref: function ref(_ref3) {
            _this3.mountNode = _ref3 ? _ref3.getMountNode() : _ref3;
          },
          container: props.container
        },
        _react2.default.createElement(
          'div',
          {
            ref: function ref(_ref2) {
              _this3.modal = _ref2;
            },
            role: props.role || 'dialog',
            style: props.style,
            className: props.className
          },
          backdrop && this.renderBackdrop(),
          dialog
        )
      );
    }
  }]);

  return Modal;
}(_react2.default.Component);

Modal.propTypes = _extends({}, _Portal2.default.propTypes, {

  show: _propTypes2.default.bool,
  container: _propTypes2.default.oneOfType([_propTypes3.mountable, _propTypes2.default.func]),
  onShow: _propTypes2.default.func,
  onHide: _propTypes2.default.func,
  backdrop: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['static'])]),
  onEscapeKeyUp: _propTypes2.default.func,
  onBackdropClick: _propTypes2.default.func,
  /*eslint-disable */
  backdropStyle: _propTypes2.default.object,
  backdropClassName: _propTypes2.default.string,
  containerClassName: _propTypes2.default.string,
  keyboard: _propTypes2.default.bool,
  transition: _propTypes3.elementType,
  dialogTransitionTimeout: _propTypes2.default.number,
  backdropTransitionTimeout: _propTypes2.default.number,
  autoFocus: _propTypes2.default.bool,
  enforceFocus: _propTypes2.default.bool,
  onEnter: _propTypes2.default.func,
  onEntering: _propTypes2.default.func,
  onEntered: _propTypes2.default.func,
  onExit: _propTypes2.default.func,
  onExiting: _propTypes2.default.func,
  onExited: _propTypes2.default.func

});
Modal.defaultProps = {
  show: false,
  backdrop: true,
  keyboard: true,
  autoFocus: true,
  enforceFocus: true,
  onHide: noop
};


Modal.manager = modalManager;

exports.default = Modal;