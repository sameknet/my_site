'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _domLib = require('dom-lib');

var _mountable = require('../propTypes/mountable');

var _mountable2 = _interopRequireDefault(_mountable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Portal = function (_React$Component) {
  _inherits(Portal, _React$Component);

  function Portal() {
    _classCallCheck(this, Portal);

    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
  }

  _createClass(Portal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderOverlay();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      if (this.overlayTarget && nextProps.container !== this.props.container) {
        this.portalContainerNode.removeChild(this.overlayTarget);
        this.portalContainerNode = (0, _domLib.getContainer)(nextProps.container, (0, _domLib.ownerDocument)(this).body);
        this.portalContainerNode.appendChild(this.overlayTarget);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.renderOverlay();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unrenderOverlay();
      this.unmountOverlayTarget();
    }
  }, {
    key: 'getMountNode',
    value: function getMountNode() {
      return this.overlayTarget;
    }
  }, {
    key: 'getOverlayDOMNode',
    value: function getOverlayDOMNode() {
      if (!this.isMounted()) {
        //eslint-disable-line
        throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
      }

      if (this.overlayInstance) {
        if (this.overlayInstance.getWrappedDOMNode) {
          return this.overlayInstance.getWrappedDOMNode();
        }
        /* eslint-disable */
        return (0, _reactDom.findDOMNode)(this.overlayInstance);
      }

      return null;
    }
  }, {
    key: 'mountOverlayTarget',
    value: function mountOverlayTarget() {
      if (!this.overlayTarget) {
        this.overlayTarget = document.createElement('div');
        this.portalContainerNode = (0, _domLib.getContainer)(this.props.container, (0, _domLib.ownerDocument)(this).body);
        this.portalContainerNode.appendChild(this.overlayTarget);
      }
    }
  }, {
    key: 'unmountOverlayTarget',
    value: function unmountOverlayTarget() {
      if (this.overlayTarget) {
        this.portalContainerNode.removeChild(this.overlayTarget);
        this.overlayTarget = null;
      }
      this.portalContainerNode = null;
    }
  }, {
    key: 'unrenderOverlay',
    value: function unrenderOverlay() {
      if (this.overlayTarget) {
        _reactDom2.default.unmountComponentAtNode(this.overlayTarget);
        this.overlayInstance = null;
      }
    }
  }, {
    key: 'renderOverlay',
    value: function renderOverlay() {

      var overlay = !this.props.children ? null : _react2.default.Children.only(this.props.children);

      // Save reference for future access.
      if (overlay !== null) {
        this.mountOverlayTarget();
        this.overlayInstance = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, overlay, this.overlayTarget);
      } else {
        this.unrenderOverlay();
        this.unmountOverlayTarget();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Portal;
}(_react2.default.Component);

Portal.displayName = 'Portal';
Portal.propTypes = {
  container: _propTypes2.default.oneOfType([_mountable2.default, _propTypes2.default.func])
};
exports.default = Portal;