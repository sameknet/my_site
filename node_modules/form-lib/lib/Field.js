'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _elementType = require('rsuite-utils/lib/propTypes/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _createFormControl = require('./createFormControl');

var _createFormControl2 = _interopRequireDefault(_createFormControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  checkTrigger: _propTypes2.default.oneOf(['change', 'blur', null]),
  accepter: _elementType2.default
};

var defaultProps = {
  accepter: (0, _createFormControl2.default)('input')
};

var Field = function (_React$Component) {
  _inherits(Field, _React$Component);

  function Field(props, context) {
    _classCallCheck(this, Field);

    var _this = _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).call(this, props, context));

    if (!context.form) {
      throw new Error('Field must be inside a component decorated with <Form>');
    }

    var _context$form = context.form,
        _context$form$values = _context$form.values,
        values = _context$form$values === undefined ? {} : _context$form$values,
        _context$form$default = _context$form.defaultValues,
        defaultValues = _context$form$default === undefined ? {} : _context$form$default;

    var name = props.name;

    _this.state = {
      checkResult: {},
      value: values[name] || defaultValues[name]
    };
    _this.handleFieldChange = _this.handleFieldChange.bind(_this);
    _this.handleFieldBlur = _this.handleFieldBlur.bind(_this);
    _this.handleFieldCheck = _this.handleFieldCheck.bind(_this);
    return _this;
  }

  _createClass(Field, [{
    key: 'getCheckTrigger',
    value: function getCheckTrigger() {
      var checkTrigger = this.context.form.checkTrigger;

      return this.props.checkTrigger || checkTrigger;
    }
  }, {
    key: 'handleFieldChange',
    value: function handleFieldChange(value, event) {
      var _props = this.props,
          name = _props.name,
          onChange = _props.onChange;
      var onFieldChange = this.context.form.onFieldChange;

      var checkTrigger = this.getCheckTrigger();
      var checkResult = this.handleFieldCheck(value, checkTrigger === 'change');
      this.setState({ checkResult: checkResult, value: value });
      onFieldChange(name, value, event);
      onChange && onChange(value, event);
    }
  }, {
    key: 'handleFieldBlur',
    value: function handleFieldBlur(event) {
      var onBlur = this.props.onBlur;

      var checkTrigger = this.getCheckTrigger();
      this.handleFieldCheck(this.state.value, checkTrigger === 'blur');
      onBlur && onBlur(event);
    }
  }, {
    key: 'handleFieldCheck',
    value: function handleFieldCheck(value, isCheckTrigger, callback) {
      var name = this.props.name;
      var _context$form2 = this.context.form,
          onFieldError = _context$form2.onFieldError,
          onFieldSuccess = _context$form2.onFieldSuccess,
          model = _context$form2.model;


      var checkResult = model.checkForField(name, value);

      if (isCheckTrigger) {
        if (checkResult.hasError) {
          onFieldError(name, checkResult.errorMessage, callback);
        } else {
          onFieldSuccess(name, callback);
        }
      }

      return checkResult;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          name = _props2.name,
          Component = _props2.accepter,
          props = _objectWithoutProperties(_props2, ['name', 'accepter']);

      var _context$form3 = this.context.form,
          _context$form3$values = _context$form3.values,
          values = _context$form3$values === undefined ? {} : _context$form3$values,
          _context$form3$defaul = _context$form3.defaultValues,
          defaultValues = _context$form3$defaul === undefined ? {} : _context$form3$defaul;


      return _react2.default.createElement(Component, _extends({}, props, {
        name: name,
        onChange: this.handleFieldChange,
        onBlur: this.handleFieldBlur,
        defaultValue: defaultValues[name],
        value: values[name]
      }));
    }
  }]);

  return Field;
}(_react2.default.Component);

Field.defaultProps = defaultProps;
Field.propTypes = propTypes;
Field.contextTypes = {
  form: _propTypes2.default.object
};

exports.default = Field;