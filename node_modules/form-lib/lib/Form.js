'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rsuiteSchema = require('rsuite-schema');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  horizontal: _propTypes2.default.bool,
  inline: _propTypes2.default.bool,
  /*eslint-disable */
  values: _propTypes2.default.object,
  defaultValues: _propTypes2.default.object,
  model: _propTypes2.default.instanceOf(_rsuiteSchema.Schema),

  /**
   * 数据校验的时候，延迟处理，默认为 500 毫秒
   */
  checkDelay: _propTypes2.default.number,

  /**
   * 数据校验的触发类型, 默认 change
   * change: 数据改变的时候触发
   * blur: 控件失去焦点时候触发
   * null: 不触发校验，但是在 调用 Form 的 check 方法的时候还是会触发
   */
  checkTrigger: _propTypes2.default.oneOf(['change', 'blur', null]),
  onChange: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onCheck: _propTypes2.default.func,
  errors: _propTypes2.default.object
};

var defaultProps = {
  model: (0, _rsuiteSchema.SchemaModel)({}),
  horizontal: false,
  inline: false,
  defaultValues: {},
  checkDelay: 500,
  checkTrigger: 'change'
};

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

    _this.state = {
      errors: props.errors || {},
      /**
       * 把当前 values 维护到 state 中，主要为 Form 中的 check 方法
       * 默认会设置 props.values ，
       * 如果还是没有的话就默认为 {}
       */
      values: props.defaultValues || {}
    };
    _this.handleFieldChange = _this.handleFieldChange.bind(_this);
    _this.handleFieldError = _lodash2.default.debounce(_this.handleFieldError.bind(_this), props.checkDelay);
    _this.handleFieldSuccess = _lodash2.default.debounce(_this.handleFieldSuccess.bind(_this), props.checkDelay);
    _this.check = _this.check.bind(_this);
    return _this;
  }

  _createClass(Form, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _props = this.props,
          defaultValues = _props.defaultValues,
          model = _props.model,
          checkTrigger = _props.checkTrigger;

      var values = this.getValues();
      var errors = this.getErrors();

      return {
        form: {
          onFieldChange: this.handleFieldChange,
          onFieldError: this.handleFieldError,
          onFieldSuccess: this.handleFieldSuccess,
          checkTrigger: checkTrigger,
          values: values,
          defaultValues: defaultValues,
          errors: errors,
          model: model
        }
      };
    }
  }, {
    key: 'getErrors',
    value: function getErrors() {
      var errors = this.props.errors;

      return typeof errors === 'undefined' ? this.state.errors : errors;
    }
  }, {
    key: 'getValues',
    value: function getValues() {
      var values = this.props.values;

      return typeof values === 'undefined' ? this.state.values : values;
    }

    /**
     * 校验表单数据是否合法
     * 该方法主要提供给 Form ref 时候调用
     * return  true/false
     */

  }, {
    key: 'check',
    value: function check(callback) {
      var values = this.getValues();
      var _props2 = this.props,
          defaultValues = _props2.defaultValues,
          model = _props2.model,
          onCheck = _props2.onCheck,
          onError = _props2.onError;

      var errors = {};
      var errorCount = 0;

      var nextValues = Object.assign({}, defaultValues, values);

      Object.keys(model.schema).forEach(function (key) {
        var checkResult = model.checkForField(key, nextValues[key]);

        if (checkResult.hasError === true) {
          errorCount += 1;
          errors[key] = checkResult.errorMessage;
        }
      });

      this.setState({ errors: errors });
      onCheck && onCheck(errors);
      callback && callback(errors);
      if (errorCount > 0) {
        onError && onError(errors);
        return false;
      }

      return true;
    }
  }, {
    key: 'cleanErrors',
    value: function cleanErrors(callback) {
      this.setState({ errors: {} }, callback);
    }
  }, {
    key: 'resetErrors',
    value: function resetErrors() {
      var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments[1];

      this.setState({ errors: errors }, callback);
    }

    /**
     * 验证，出现错误的回调函数
     */

  }, {
    key: 'handleFieldError',
    value: function handleFieldError(name, error) {
      var _props3 = this.props,
          onError = _props3.onError,
          onCheck = _props3.onCheck;

      var errors = Object.assign({}, this.state.errors, _defineProperty({}, name, error));

      this.setState({ errors: errors }, function () {
        onError && onError(errors);
        onCheck && onCheck(errors);
      });
    }

    /**
     * 验证通过的回调函数
     */

  }, {
    key: 'handleFieldSuccess',
    value: function handleFieldSuccess(name) {
      var onCheck = this.props.onCheck;

      var errors = Object.assign({}, this.state.errors, _defineProperty({}, name, null));
      this.setState({ errors: errors }, function () {
        onCheck && onCheck(errors);
      });
    }

    /**
     * 每一次 字段数据更新回调函数
     */

  }, {
    key: 'handleFieldChange',
    value: function handleFieldChange(name, value, event) {
      var onChange = this.props.onChange;

      var values = this.getValues();
      var nextValues = Object.assign({}, values, _defineProperty({}, name, value));

      this.setState({
        values: nextValues
      });

      onChange && onChange(nextValues, event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          horizontal = _props4.horizontal,
          inline = _props4.inline,
          className = _props4.className,
          props = _objectWithoutProperties(_props4, ['horizontal', 'inline', 'className']);

      var clesses = (0, _classnames2.default)('form', {
        'form-horizontal': horizontal,
        'form-inline': inline
      }, className);

      var elementProps = _lodash2.default.omit(props, Object.keys(propTypes));

      return _react2.default.createElement('form', _extends({}, elementProps, {
        onSubmit: function onSubmit(e) {
          e.preventDefault();
        },
        className: clesses
      }));
    }
  }]);

  return Form;
}(_react2.default.Component);

Form.defaultProps = defaultProps;
Form.propTypes = propTypes;
Form.childContextTypes = {
  form: _propTypes2.default.object.isRequired
};

exports.default = Form;